buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
	maven {
		name = "chickenbones"
		url = "http://chickenbones.net/maven"
	}
}

apply plugin: 'java'
apply plugin: 'forge'
apply plugin: 'maven'

ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

dependencies {
    compile "codechicken:CodeChickenLib:${config.minecraft_version}-${config.ccl_version}:dev"
    compile "codechicken:CodeChickenCore:${config.minecraft_version}-${config.ccc_version}:dev"
}

version = config.mod_version
group= config.mod_group
archivesBaseName = config.mod_name

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "minecraft"

    replace "@VERSION@", "${config.mod_version}.${System.getenv("CIRCLE_BUILD_NUM") ?: (System.getenv("BUILD_NUMBER") ?: 0)}"
    replace "@MC_VERSION@", config.minecraft_version

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = config.mappings
}

version = "${config.minecraft_version}-${config.mod_version}.${System.getenv("CIRCLE_BUILD_NUM") ?: 0}"

processResources {
    inputs.property "version", project.version
    inputs.property "mc_version", project.config.minecraft_version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        
        expand 'version':project.version, 'mc_version':project.config.minecraft_version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

def commonManifest = {
    attributes 'FMLCorePlugin': 'org.agecraft.hookinator.asm.CorePlugin'
}

jar {
    classifier = 'universal'
    manifest commonManifest
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
    manifest commonManifest
}

build.dependsOn sourceJar, javadocJar, deobfJar

artifacts {
    archives sourceJar
    archives javadocJar
    archives deobfJar
}

